安装完成
 $ git config --global user.name "YourName"
 $ git config --global email.name "email@example.com"

 --global 表示这台机器的所有git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户面和email

——————————-———————————————————————————————————————————————————————————————————————————————————————————————————

创建版本库

 第一步： 创建一个空目录作为仓库
  example：
  $ mkdir learngit
  $ cd learngit
  $ pwd
  /Users/michael/learngit

 第二步：把上面的目录变成git可以管理的目录
  $ git init
  Initialized empty Git repository in /Users/michael/learngit/.git
  当前目录下回多出一个.git的目录

——————————————————————————————————————————————————————————————————————————————————————————————————————————————

把文件放到版本库中

 将文件放到如上面的learngit目录下（子目录也可以）

 第一步：将文件添加到仓库
  $ git add 文件名

 第二步：将文件提交到仓库
  $ git commit -m "wrote a readme file"
  [master (root-commit) cb926e7] wrote a readme file
  1 file changed, 2 insertions(+)
  create mode 100644 readme.txt

  -m 后面添加的是对这次提交文件的说明，方便以后查看方便

 注意：
  commit可以一次提交很多文件，所以你可以多次add不同的文件
  $ git add file1.txt
  $ git add file2.txt file3.txt
  $ git commit -m "add 3 files."
——————————————————————————————————————————————————————————————————————————————————————————————————————————————

版本回退

 通过gitlog查看历史记录
  $ git log
  commit 3628164fb26d48395383f8f31179f24e0882e1e0
  Author: Michael Liao <askxuefeng@gmail.com>
  Date:   Tue Aug 20 15:11:49 2013 +0800

  append GPL

  commit ea34578d5496d7dd233c827ed32a8cd576c5ee85
  Author: Michael Liao <askxuefeng@gmail.com>
  Date:   Tue Aug 20 14:53:12 2013 +0800

  add distributed

  commit cb926e7ea50ad11b8f9e909c05226233bf755030
  Author: Michael Liao <askxuefeng@gmail.com>
  Date:   Mon Aug 19 17:51:55 2013 +0800

  wrote a readme file

  git log命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是append GPL，上一次是add distributed，
  最早的一次是wrote a readme file。 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：

  $ git log --pretty=oneline
  3628164fb26d48395383f8f31179f24e0882e1e0 append GPL
  ea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributed
  cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file

 通过git reset回退版本
  HEAD表示当前版本，上个版本是HEAD^,上上个版本是HEAD^^,往上100个版本是HEAD~100,也可以使用上面记录的commit id
  
  $ git reset --hard HEAD^
  HEAD is now at ea34578 add distributed 

  $ git reset --hard 3628164
  HEAD is now at 3628164 append GPL
  版本号没必要写全，能证明唯一就行

 注意：回退后第二天后悔了，但是原来的版本看不见了怎么办
  git reflog可以记录每一次命令，可以查找昨晚回退的原版本的版本号

  $ git reflog
  ea34578 HEAD@{0}: reset: moving to HEAD^
  3628164 HEAD@{1}: commit: append GPL
  ea34578 HEAD@{2}: commit: add distributed
  cb926e7 HEAD@{3}: commit (initial): wrote a readme file

———————————————————————————————————————————————————————————————————————————————————————————————————————————————
 
工作区和暂存区

 工作区就是电脑里的目录，比如learngit

 版本库

  工作区里有一个.git的文件，这个不是工作区，是git的版本库，版本库最重要的就是stage（index）暂存区和自动创建的第一个分支master
  master由指针HEAD指向

  git add 就是把工作区的文件修改增加到暂存区
  git commit 就是把暂存区的所有内容添加到当前分支

  通过git status 可以产看当前工作区文件的修改提交情况

  每次修改，如果不add到暂存区，那就不会加入到commit中

  用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

——————————————————————————————————————————————————————————————————————————————————————————————————————————————

撤销修改

 当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file
 --一定要有 没有的话这个命令就是切换分支了

 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，
 就回到了场景1，第二步按场景1操作

 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库

———————————————————————————————————————————————————————————————————————————————————————————————————————————————

删除文件

 工作区下，直接在文件管理器中把没用的文件删了，或者用rm命令删了（工作区和版本库不一致了）

 此时，两种情况处理版本库

 如果确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit

 如果删错了，版本库中文件还在，可以用撤销修改命令撤销删除，$ git checkout -- test.txt
 只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容

——————————————————————————————————————————————————————————————————————————————————————————————————————————————

添加远程库

 添加本地SSH pubKey到github

  1 - $ cd ~/.ssh  查看本机是否有ssh key设置 有则进入 .ssh文件 ls看下内容 已存在id_rsa 和 id_rsa.pub，则可以rm * 删除

  2 - $ cd ~  保证在~家目录下

  3 - $ ssh-keygen -t rsa -C "xxxxxx@yy.com"  生成ssh key
  Generating public/private rsa key pair.
  Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   #不填直接回车
  Enter passphrase (empty for no passphrase):   #输入密码（可以为空）
  Enter same passphrase again:   #再次确认密码（可以为空）
  Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa.   #生成的密钥
  Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub.  #生成的公钥
  The key fingerprint is:
  e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 xxxxxx@yy.com

  *本机已完成ssh key设置，其存放路径为：c:/Users/xxxx_000/.ssh/下。
  注释：可生成ssh key自定义名称的密钥，默认id_rsa。
  $ ssh-keygen -t rsa -C "邮箱地址" -f ~/.ssh/githug_blog_keys 
  #生成ssh key的名称为githug_blog_keys，慎用容易出现其它异常。

  4 - 添加ssh key到github --> 复制pub 公钥到github

  5 - 测试ssh key是否添加成功  
  $ ssh -T git@github.com
  The authenticity of host 'github.com (192.30.252.129)' can't be established.
  RSA key fingerprint is 16:27:xx:xx:xx:xx:xx:4d:eb:df:a6:48.
  Are you sure you want to continue connecting (yes/no)? yes #确认你是否继续联系，输入yes
  Warning: Permanently added 'github.com,192.30.252.129' (RSA) to the list of known hosts.
  Enter passphrase for key '/c/Users/xxxx_000/.ssh/id_rsa':  
  #生成ssh kye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。
  Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. #出现词句话，说明设置成功。


 本地仓库推送到GitHub仓库

  $ git remote add origin git@server-name:path/repo-name.git
  添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
  关联后，使用命令git push -u origin master第一次推送master分支的所有内容
  此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改
  
  题外话：由于远程库的名字都是origin，如果我即用github 也用gitee，两个远程库不能都叫origin怎么办
   git remote -v
   origin    git@github.com:michaelliao/learngit.git (fetch)
   origin    git@github.com:michaelliao/learngit.git (push)
   查看远程库信息，关联origin的远程库指向github

   git remote rm origin  可以先删除名为origin的远程库

   git remote add github git@github.com:michaelliao/learngit.git  关联github，命名就叫github
   git remote add gitee git@gitee.com:liaoxuefeng/learngit.git 关联gitee，命名就叫gitee

   git remote -v
   gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)
   gitee    git@gitee.com:liaoxuefeng/learngit.git (push)
   github    git@github.com:michaelliao/learngit.git (fetch)
   github    git@github.com:michaelliao/learngit.git (push)
   两个远程库

   git push github master  推送到github
   git push gitee master   推送到gitee

   注意：出现版本重复，即如下错误，可以使用 git push github master -f 来覆盖  但是之前的会丢失 慎用
   $ git push -u github master
   Enter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':
   To github.com:PsychoY/learngit.git
   ! [rejected]        master -> master (non-fast-forward)
   error: failed to push some refs to 'git@github.com:PsychoY/learngit.git'
   hint: Updates were rejected because the tip of your current branch is behind
   hint: its remote counterpart. Integrate the remote changes (e.g.
   hint: 'git pull ...') before pushing again.
   hint: See the 'Note about fast-forwards' in 'git push --help' for details.

————————————————————————————————————————————————————————————————————————————————————————————————————————————————

克隆远程库

 $ git clone git@github.com:michaelliao/gitskills.git
 Cloning into 'gitskills'...
 remote: Counting objects: 3, done.
 remote: Total 3 (delta 0), reused 0 (delta 0)
 Receiving objects: 100% (3/3), done.

 $ cd gitskills
 $ ls
 README.md

————————————————————————————————————————————————————————————————————————————————————————————————————————————————

分支管理

 创建分支
  $ git checkout -b dev
  Switched to a new branch 'dev'
  -b参数表示创建并切换，相当于以下两条命令：
  $ git branch dev
  $ git checkout dev
  Switched to branch 'dev'

  git branch命令查看当前分支：
  $ git branch
  * dev
  master
  当前分支前面会标一个*号

  然后提交：
  $ git add readme.txt 
  $ git commit -m "branch test"
  [dev fec145a] branch test
  1 file changed, 1 insertion(+) 

  提交是在dev分支上，而master分支此刻的提交点并没有变

 合并分支
  在master下
  $ git merge dev
  Updating d17efd8..fec145a
  Fast-forward
  readme.txt |    1 +
  1 file changed, 1 insertion(+)

  Fast-forward “快进模式”  直接把master指向dev的当前提交，所以合并速度非常快。 后面会讲其他方式的合并。

 删除分支
  合并完成后，就可以放心地删除dev分支了：
  $ git branch -d dev
  Deleted branch dev (was fec145a).

 注意：
  因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master
  分支上工作效果是一样的，但过程更安全。  

—————————————————————————————————————————————————————————————————————————————————————————————————————————————————

解决冲突
 
 同一个文件 在新建分支和master分支上都做了修改并提交  此时 新分支同master分支合并的时候就不能执行快速模式了
 需要先将冲突手动解决再提交
 git status可以告诉我们冲突的文件
 $ git status
 # On branch master
 # Your branch is ahead of 'origin/master' by 2 commits.
 #
 # Unmerged paths:
 #   (use "git add/rm <file>..." as appropriate to mark resolution)
 #
 #       both modified:      readme.txt
 #
 no changes added to commit (use "git add" and/or "git commit -a")

 直接查看readme.txt的内容：
 Git is a distributed version control system.
 Git is free software distributed under the GPL.
 Git has a mutable index called stage.
 Git tracks changes of files.
 <<<<<<< HEAD
 Creating a new branch is quick & simple.
 =======
 Creating a new branch is quick AND simple.
 >>>>>>> feature1

 Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，修改后保存
 再提交：
 $ git add readme.txt 
 $ git commit -m "conflict fixed"
 [master 59bc1cb] conflict fixed

 用带参数的git log也可以看到分支的合并情况：
 $ git log --graph --pretty=oneline --abbrev-commit
 *   59bc1cb conflict fixed
 |\
 | * 75a857c AND simple
 * | 400b400 & simple
 |/
 * fec145a branch test
 ...
 
 最后，删除新分支

—————————————————————————————————————————————————————————————————————————————————————————————————————————————————

分支策略
 
 1 快速模式的分支合并方法 在新分支被删除后 会丢失分支信息 --no--ff 为强制禁用快速模式 生成一个新的commit

 2 实战

 创建并切换dev分支
 $ git checkout -b dev
 Switched to a new branch 'dev'

 修改文件 提交
 $ git add readme.txt 
 $ git commit -m "add merge"
 [dev 6224937] add merge
 1 file changed, 1 insertion(+)

 现在，我们切换回master：
 $ git checkout master
 Switched to branch 'master'

 准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
 $ git merge --no-ff -m "merge with no-ff" dev
 Merge made by the 'recursive' strategy.
 readme.txt |    1 +
 1 file changed, 1 insertion(+)

 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

 合并后，我们用git log看看分支历史：
 $ git log --graph --pretty=oneline --abbrev-commit
 *   7825a50 merge with no-ff
 |\
 | * 6224937 add merge
 |/
 *   59bc1cb conflict fixed
 ...

 3 策略

 首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

 干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，
 再把dev分支合并到master上，在master分支发布1.0版本；

 你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

——————————————————————————————————————————————————————————————————————————————————————————————————————————————

Bug分支

 软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，
 所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

 当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，
 但是，等等，当前正在dev上进行的工作还没有提交：
 $ git status
  # On branch dev
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #       new file:   hello.py
  #
  # Changes not staged for commit:
  #   (use "git add <file>..." to update what will be committed)
  #   (use "git checkout -- <file>..." to discard changes in working directory)
  #
  #       modified:   readme.txt
  #

 并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？

 Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

 $ git stash
  Saved working directory and index state WIP on dev: 6224937 add merge
  HEAD is now at 6224937 add merge

 现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。

 首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
 $ git checkout master
  Switched to branch 'master'
  Your branch is ahead of 'origin/master' by 6 commits.
  $ git checkout -b issue-101
  Switched to a new branch 'issue-101'

 现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：
 $ git add readme.txt 
  $ git commit -m "fix bug 101"
  [issue-101 cc17032] fix bug 101
  1 file changed, 1 insertion(+), 1 deletion(-)

 修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：

 $ git checkout master
  Switched to branch 'master'
  Your branch is ahead of 'origin/master' by 2 commits.

 $ git merge --no-ff -m "merged bug fix 101" issue-101
  Merge made by the 'recursive' strategy.
  readme.txt |    2 +-
  1 file changed, 1 insertion(+), 1 deletion(-)

 $ git branch -d issue-101
  Deleted branch issue-101 (was cc17032).

 bug修复后，接着回到dev分支干活了！
 $ git checkout dev
  Switched to branch 'dev'
 $ git status
  # On branch dev
  nothing to commit (working directory clean)
 工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
 $ git stash list
  stash@{0}: WIP on dev: 6224937 add merge

 工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

 一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

 另一种方式是用git stash pop，恢复的同时把stash内容也删了：
 $ git stash pop
  # On branch dev
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #       new file:   hello.py
  #
  # Changes not staged for commit:
  #   (use "git add <file>..." to update what will be committed)
  #   (use "git checkout -- <file>..." to discard changes in working directory)
  #
  #       modified:   readme.txt
  #
  Dropped refs/stash@{0} (f624f8e5f082f2df2bed8a4e09c12fd2943bdd40)

 再用git stash list查看，就看不到任何stash内容了：
 $ git stash list

 你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
 $ git stash apply stash@{0}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————

feature分支

 开发一个新feature，最好新建一个分支；（类似新建bug分支）

 如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。（没合并-d删除不了）

___________________________________________________________________________________________________________________

多人协作

 远程仓库的默认名称是origin  要查看远程库的信息，用git remote或者git remote -v
 $ git remote -v
 origin  git@github.com:michaelliao/learngit.git (fetch)
 origin  git@github.com:michaelliao/learngit.git (push)

 上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

 推送分支

  把该分支上的所有本地提交推送到远程库
  $ git push origin master

  如果要推送其他分支，比如dev，就改成：
  $ git push origin dev

  并不是一定要把本地分支往远程推送
  1 master分支是主分支，因此要时刻与远程同步；
  2 dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
  3 bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
  4 feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

 抓取分支

  在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆
  $ git clone git@github.com:michaelliao/learngit.git
  Cloning into 'learngit'...
  remote: Counting objects: 46, done.
  remote: Compressing objects: 100% (26/26), done.
  remote: Total 46 (delta 16), reused 45 (delta 15)
  Receiving objects: 100% (46/46), 15.69 KiB | 6 KiB/s, done.
  Resolving deltas: 100% (16/16), done.

  从远程库clone时，只能看到本地的master分支。不信可以用git branch命令看看：
  $ git branch
  * master

  场景

  现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
  $ git checkout -b dev origin/dev

  现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：
  $ git commit -m "add /usr/bin/env"
  [dev 291bea8] add /usr/bin/env
  1 file changed, 1 insertion(+)

  $ git push origin dev
  Counting objects: 5, done.
  Delta compression using up to 4 threads.
  Compressing objects: 100% (2/2), done.
  Writing objects: 100% (3/3), 349 bytes, done.
  Total 3 (delta 0), reused 0 (delta 0)
  To git@github.com:michaelliao/learngit.git
  fc38031..291bea8  dev -> dev

  你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：
  $ git add hello.py

  $ git commit -m "add coding: utf-8"
  [dev bd6ae48] add coding: utf-8
  1 file changed, 1 insertion(+)

  $ git push origin dev
  To git@github.com:michaelliao/learngit.git
  ! [rejected]        dev -> dev (non-fast-forward)
  error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'
  hint: Updates were rejected because the tip of your current branch is behind
  hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
  hint: before pushing again.
  hint: See the 'Note about fast-forwards' in 'git push --help' for details.
  推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突

  Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
  $ git pull
  remote: Counting objects: 5, done.
  remote: Compressing objects: 100% (2/2), done.
  remote: Total 3 (delta 0), reused 3 (delta 0)
  Unpacking objects: 100% (3/3), done.
  From github.com:michaelliao/learngit
  fc38031..291bea8  dev        -> origin/dev
  There is no tracking information for the current branch.
  Please specify which branch you want to merge with.
  See git-pull(1) for details

  git pull <remote> <branch>

  If you wish to set tracking information for this branch you can do so with:

  git branch --set-upstream dev origin/<branch>


  git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接
  根据提示，设置dev和origin/dev的链接：
  $ git branch --set-upstream dev origin/dev
  Branch dev set up to track remote branch dev from origin.

  再pull：
  $ git pull
  Auto-merging hello.py
  CONFLICT (content): Merge conflict in hello.py
  Automatic merge failed; fix conflicts and then commit the result.

  成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
  $ git commit -m "merge & fix hello.py"
  [dev adca45d] merge & fix hello.py

  $ git push origin dev
  Counting objects: 10, done.
  Delta compression using up to 4 threads.
  Compressing objects: 100% (5/5), done.
  Writing objects: 100% (6/6), 747 bytes, done.
  Total 6 (delta 0), reused 0 (delta 0)
  To git@github.com:michaelliao/learngit.git
  291bea8..adca45d  dev -> dev

——————————————————————————————————————————————————————————————————————————————————————————————————————————————

创建标签

 在Git中打标签非常简单，首先，切换到需要打标签的分支上：
 $ git branch
 * dev
 master
 $ git checkout master
 Switched to branch 'master'

 然后，敲命令git tag <name>就可以打一个新标签：
 $ git tag v1.0

 可以用命令git tag查看所有标签：
 $ git tag
 v1.0
 默认标签是打在最新提交的commit上的。

 如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？

 找到历史提交的commit id，然后打上就可以了：
 $ git log --pretty=oneline --abbrev-commit
 6a5819e merged bug fix 101
 cc17032 fix bug 101
 7825a50 merge with no-ff
 6224937 add merge
 59bc1cb conflict fixed
 400b400 & simple
 75a857c AND simple
 fec145a branch test
 d17efd8 remove test.txt
 ...

 比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令：
 $ git tag v0.9 6224937

 再用命令git tag查看标签：
 $ git tag
 v0.9
 v1.0

 git show <tagname>查看标签信息：
 $ git show v0.9
 commit 622493706ab447b6bb37e4e2a2f276a20fed2ab4
 Author: Michael Liao <askxuefeng@gmail.com>
 Date:   Thu Aug 22 11:22:08 2013 +0800

 add merge
 ...

 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
 $ git tag -a v0.1 -m "version 0.1 released" 3628164

 $ git show v0.1
 tag v0.1
 Tagger: Michael Liao <askxuefeng@gmail.com>
 Date:   Mon Aug 26 07:28:11 2013 +0800

 version 0.1 released

 commit 3628164fb26d48395383f8f31179f24e0882e1e0
 Author: Michael Liao <askxuefeng@gmail.com>
 Date:   Tue Aug 20 15:11:49 2013 +0800

 append GPL

 还可以通过-s用私钥签名一个标签：
 $ git tag -s v0.2 -m "signed version 0.2 released" fec145a

 签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：
 如果报错，请参考GnuPG帮助文档配置Key。

—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

操作标签
 
 标签打错了，可以删除：
 $ git tag -d v0.1
 Deleted tag 'v0.1' (was e078af9)

 因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。

 如果要推送某个标签到远程，使用命令git push origin <tagname>：
 $ git push origin v1.0
 Total 0 (delta 0), reused 0 (delta 0)
 To git@github.com:michaelliao/learngit.git
 * [new tag]         v1.0 -> v1.0

 或者，一次性推送全部尚未推送到远程的本地标签：
 $ git push origin --tags
 Counting objects: 1, done.
 Writing objects: 100% (1/1), 554 bytes, done.
 Total 1 (delta 0), reused 0 (delta 0)
 To git@github.com:michaelliao/learngit.git
 * [new tag]         v0.2 -> v0.2
 * [new tag]         v0.9 -> v0.9

 如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
 $ git tag -d v0.9
 Deleted tag 'v0.9' (was 6224937) 

 然后，从远程删除。删除命令也是push，但是格式如下：
 $ git push origin :refs/tags/v0.9
 To git@github.com:michaelliao/learngit.git
 - [deleted]         v0.9

 要看看是否真的从远程库删除了标签，可以登陆GitHub查看。

——————————————————————————————————————————————————————————————————————————————————————————————————————————————



