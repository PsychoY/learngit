安装完成
 $ git config --global user.name "YourName"
 $ git config --global email.name "email@example.com"

 --global 表示这台机器的所有git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户面和email

——————————-———————————————————————————————————————————————————————————————————————————————————————————————————

创建版本库

 第一步： 创建一个空目录作为仓库
  example：
  $ mkdir learngit
  $ cd learngit
  $ pwd
  /Users/michael/learngit

 第二步：把上面的目录变成git可以管理的目录
  $ git init
  Initialized empty Git repository in /Users/michael/learngit/.git
  当前目录下回多出一个.git的目录

——————————————————————————————————————————————————————————————————————————————————————————————————————————————

把文件放到版本库中

 将文件放到如上面的learngit目录下（子目录也可以）

 第一步：将文件添加到仓库
  $ git add 文件名

 第二步：将文件提交到仓库
  $ git commit -m "wrote a readme file"
  [master (root-commit) cb926e7] wrote a readme file
  1 file changed, 2 insertions(+)
  create mode 100644 readme.txt

  -m 后面添加的是对这次提交文件的说明，方便以后查看方便

 注意：
  commit可以一次提交很多文件，所以你可以多次add不同的文件
  $ git add file1.txt
  $ git add file2.txt file3.txt
  $ git commit -m "add 3 files."
——————————————————————————————————————————————————————————————————————————————————————————————————————————————

版本回退

 通过gitlog查看历史记录
  $ git log
  commit 3628164fb26d48395383f8f31179f24e0882e1e0
  Author: Michael Liao <askxuefeng@gmail.com>
  Date:   Tue Aug 20 15:11:49 2013 +0800

  append GPL

  commit ea34578d5496d7dd233c827ed32a8cd576c5ee85
  Author: Michael Liao <askxuefeng@gmail.com>
  Date:   Tue Aug 20 14:53:12 2013 +0800

  add distributed

  commit cb926e7ea50ad11b8f9e909c05226233bf755030
  Author: Michael Liao <askxuefeng@gmail.com>
  Date:   Mon Aug 19 17:51:55 2013 +0800

  wrote a readme file

  git log命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是append GPL，上一次是add distributed，
  最早的一次是wrote a readme file。 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：

  $ git log --pretty=oneline
  3628164fb26d48395383f8f31179f24e0882e1e0 append GPL
  ea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributed
  cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file

 通过git reset回退版本
  HEAD表示当前版本，上个版本是HEAD^,上上个版本是HEAD^^,往上100个版本是HEAD~100,也可以使用上面记录的commit id
  
  $ git reset --hard HEAD^
  HEAD is now at ea34578 add distributed 

  $ git reset --hard 3628164
  HEAD is now at 3628164 append GPL
  版本号没必要写全，能证明唯一就行

 注意：回退后第二天后悔了，但是原来的版本看不见了怎么办
  git reflog可以记录每一次命令，可以查找昨晚回退的原版本的版本号

  $ git reflog
  ea34578 HEAD@{0}: reset: moving to HEAD^
  3628164 HEAD@{1}: commit: append GPL
  ea34578 HEAD@{2}: commit: add distributed
  cb926e7 HEAD@{3}: commit (initial): wrote a readme file

———————————————————————————————————————————————————————————————————————————————————————————————————————————————
 
工作区和暂存区

 工作区就是电脑里的目录，比如learngit

 版本库

  工作区里有一个.git的文件，这个不是工作区，是git的版本库，版本库最重要的就是stage（index）暂存区和自动创建的第一个分支master
  master由指针HEAD指向

  git add 就是把工作区的文件修改增加到暂存区
  git commit 就是把暂存区的所有内容添加到当前分支

  通过git status 可以产看当前工作区文件的修改提交情况

  每次修改，如果不add到暂存区，那就不会加入到commit中

  用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

——————————————————————————————————————————————————————————————————————————————————————————————————————————————

撤销修改

 当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file
 --一定要有 没有的话这个命令就是切换分支了

 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，
 就回到了场景1，第二步按场景1操作

 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库

———————————————————————————————————————————————————————————————————————————————————————————————————————————————

删除文件

 工作区下，直接在文件管理器中把没用的文件删了，或者用rm命令删了（工作区和版本库不一致了）

 此时，两种情况处理版本库

 如果确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit

 如果删错了，版本库中文件还在，可以用撤销修改命令撤销删除，$ git checkout -- test.txt
 只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容

——————————————————————————————————————————————————————————————————————————————————————————————————————————————

添加远程库

 添加本地SSH pubKey到github

  1 - $ cd ~/.ssh  查看本机是否有ssh key设置 有则进入 .ssh文件 ls看下内容 已存在id_rsa 和 id_rsa.pub，则可以rm * 删除

  2 - $ cd ~  保证在~家目录下

  3 - $ ssh-keygen -t rsa -C "xxxxxx@yy.com"  生成ssh key
  Generating public/private rsa key pair.
  Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   #不填直接回车
  Enter passphrase (empty for no passphrase):   #输入密码（可以为空）
  Enter same passphrase again:   #再次确认密码（可以为空）
  Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa.   #生成的密钥
  Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub.  #生成的公钥
  The key fingerprint is:
  e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 xxxxxx@yy.com

  *本机已完成ssh key设置，其存放路径为：c:/Users/xxxx_000/.ssh/下。
  注释：可生成ssh key自定义名称的密钥，默认id_rsa。
  $ ssh-keygen -t rsa -C "邮箱地址" -f ~/.ssh/githug_blog_keys 
  #生成ssh key的名称为githug_blog_keys，慎用容易出现其它异常。

  4 - 添加ssh key到github --> 复制pub 公钥到github

  5 - 测试ssh key是否添加成功  
  $ ssh -T git@github.com
  The authenticity of host 'github.com (192.30.252.129)' can't be established.
  RSA key fingerprint is 16:27:xx:xx:xx:xx:xx:4d:eb:df:a6:48.
  Are you sure you want to continue connecting (yes/no)? yes #确认你是否继续联系，输入yes
  Warning: Permanently added 'github.com,192.30.252.129' (RSA) to the list of known hosts.
  Enter passphrase for key '/c/Users/xxxx_000/.ssh/id_rsa':  
  #生成ssh kye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。
  Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. #出现词句话，说明设置成功。


 本地仓库推送到GitHub仓库

  $ git remote add origin git@server-name:path/repo-name.git
  添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
  关联后，使用命令git push -u origin master第一次推送master分支的所有内容
  此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改
  
  题外话：由于远程库的名字都是origin，如果我即用github 也用gitee，两个远程库不能都叫origin怎么办
   git remote -v
   origin    git@github.com:michaelliao/learngit.git (fetch)
   origin    git@github.com:michaelliao/learngit.git (push)
   查看远程库信息，关联origin的远程库指向github

   git remote rm origin  可以先删除名为origin的远程库

   git remote add github git@github.com:michaelliao/learngit.git  关联github，命名就叫github
   git remote add gitee git@gitee.com:liaoxuefeng/learngit.git 关联gitee，命名就叫gitee

   git remote -v
   gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)
   gitee    git@gitee.com:liaoxuefeng/learngit.git (push)
   github    git@github.com:michaelliao/learngit.git (fetch)
   github    git@github.com:michaelliao/learngit.git (push)
   两个远程库

   git push github master  推送到github
   git push gitee master   推送到gitee

   注意：出现版本重复，即如下错误，可以使用 git push github master -f 来覆盖  但是之前的会丢失 慎用
   $ git push -u github master
   Enter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':
   To github.com:PsychoY/learngit.git
   ! [rejected]        master -> master (non-fast-forward)
   error: failed to push some refs to 'git@github.com:PsychoY/learngit.git'
   hint: Updates were rejected because the tip of your current branch is behind
   hint: its remote counterpart. Integrate the remote changes (e.g.
   hint: 'git pull ...') before pushing again.
   hint: See the 'Note about fast-forwards' in 'git push --help' for details.

————————————————————————————————————————————————————————————————————————————————————————————————————————————————

克隆远程库

 $ git clone git@github.com:michaelliao/gitskills.git
 Cloning into 'gitskills'...
 remote: Counting objects: 3, done.
 remote: Total 3 (delta 0), reused 0 (delta 0)
 Receiving objects: 100% (3/3), done.

 $ cd gitskills
 $ ls
 README.md

————————————————————————————————————————————————————————————————————————————————————————————————————————————————

分支管理

 创建分支
   $ git checkout -b dev
   Switched to a new branch 'dev'
   -b参数表示创建并切换，相当于以下两条命令：
   $ git branch dev
   $ git checkout dev
   Switched to branch 'dev'

   git branch命令查看当前分支：
   $ git branch
   * dev
   master
   当前分支前面会标一个*号

   任何添加 修改到dev的 都不会反应到master上

 合并分支
  $ git merge dev
  Updating d17efd8..fec145a
  Fast-forward
  readme.txt |    1 +
  1 file changed, 1 insertion(+)

  Fast-forward “快进模式”  直接把master指向dev的当前提交，所以合并速度非常快。 后面会讲其他方式的合并。

 删除分支
  合并完成后，就可以放心地删除dev分支了：
  $ git branch -d dev
  Deleted branch dev (was fec145a).

 注意：
  因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master
  分支上工作效果是一样的，但过程更安全。  

—————————————————————————————————————————————————————————————————————————————————————————————————————————————————

解决冲突

 



